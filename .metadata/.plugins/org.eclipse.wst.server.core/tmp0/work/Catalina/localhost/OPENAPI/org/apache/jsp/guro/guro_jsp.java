/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2022-05-04 02:28:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guro;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class guro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t\r\n");
      out.write("\t// 페이지 로드 이벤트\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\tfnGuroPointFocInfoSvc();\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t// 함수\r\n");
      out.write("\tfunction fnGuroPointFocInfoSvc(){\r\n");
      out.write("\t\t$('#btn').on('click', function(){\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl: '/OPENAPI/guroPointFocInfoSvc.do',\r\n");
      out.write("\t\t\t\ttype: 'get',\r\n");
      out.write("\t\t\t\tdataType: 'xml',\r\n");
      out.write("\t\t\t\tsuccess: function(responseText){\r\n");
      out.write("\t\t\t\t\t$('#focInfo').empty(); //목록 만들어주거나 갱신할 때 앞에 empty 넣어주면 좋음\r\n");
      out.write("\t\t\t\t\t$.each($(responseText).find('item'), function(i, item){\r\n");
      out.write("\t\t\t\t\t\tvar tr = '<tr>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('localCode').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('baseDate').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('iconNo').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('temp').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('humi').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('rainProb').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('rain').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('snow').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('windDir').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\ttr += '<td>' + $(item).find('windSpeed').text() + '</td>';\r\n");
      out.write("\t\t\t\t\t\t$('#focInfo').append(tr);\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<input type=\"button\" value=\"구로구포인트날씨갱신\" id=\"btn\">\r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t\r\n");
      out.write("\t<table border=\"1\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>지역코드</td>\r\n");
      out.write("\t\t\t\t<td>발표일시</td>\r\n");
      out.write("\t\t\t\t<td>날씨코드</td>\r\n");
      out.write("\t\t\t\t<td>기온</td>\r\n");
      out.write("\t\t\t\t<td>상대습도</td>\r\n");
      out.write("\t\t\t\t<td>강수확률</td>\r\n");
      out.write("\t\t\t\t<td>강수량</td>\r\n");
      out.write("\t\t\t\t<td>적설량</td>\r\n");
      out.write("\t\t\t\t<td>풍향코드</td>\r\n");
      out.write("\t\t\t\t<td>풍속</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody id=\"focInfo\">\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
